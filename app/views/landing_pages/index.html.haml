-# ----------------------------
-# header
-# ----------------------------
= render 'layouts/header'

- if logged_in?
  .container-fluid
    .row
      -# ----------------------------
      -# sidebar
      -# ----------------------------
      = render 'layouts/side_bar'

      - if @income.present? || @variable_cost.present? || @fixed_cost.present?
        %div.col-8{ style: 'margin-left: 30px;'}
          %h2 【経済状況】
          .col-12
            %h4 - 現在の総収入: #{current_user.incomes.sum(:money)}円
            %h4 - 現在の総変動費: #{current_user.variable_costs.sum(:money)}円
            %h4 - 現在の総固定費: #{current_user.fixed_costs.sum(:money)}円
          %button.btn.btn-warning#button-1 総額
          %button.btn.btn-warning#button-2 目標貯蓄額達成率
          %p <1単位 = 10,000円>
          .chart-container.col-12
            %canvas#myChart.col-12{ style: 'position: relative; width:75vw; height:45vh' }
          .chart-container
            %canvas#Chart.col-12{ style: 'display: none; position: relative; width:75vw; height:45vh' }
      - else
        %h3 データがありません。
        %h3 ← メニューから登録してみよう！
      
      -# nil許容にする
      -# - if LandingPage.sum(:goal).present?
      -#   %P 目標額が登録されているよ
      -# - else
      -#   %p 目標額を登録してください。
      
      -# %table.table.table-striped.table-bordered
      -#   %thead
      -#     %tr
      -#       %th 日付
      -#       %th
      -#       %th
      -#       -# %th
      -#   %tbody
      -#     - @landing_page.each do |lp|
      -#       %tr
      -#         %td= lp.goal.to_i
      -#         %td
      -#           = link_to '編集', edit_landing_page_path(lp)
      -#         %td
      -#           = link_to "削除", lp, method: :delete, data: { confirm: 'この操作を取り戻すことができません。本当に削除しますか？' }
- else
  .container
    .row
      .login
        .lock-area
          %i.fa.fa-lock.lock
        = form_with scope: :session, url: login_path, local: true do |f|
          .form-group
            = f.label :email, 'Email'
            = f.text_field :email, class: 'form-control'
          .form-group
            = f.label :password, 'Password'
            %br
            = f.password_field :password, class: 'font-control'
          .lock-area
            =f.submit 'Log in', class: 'btn btn-warning', style: 'color: rgb(255, 255, 255);'
            %button.btn.btn-primary
              = link_to 'Sign up', users_path, class: 'menu-link'



-# ----------------------------
-# footer
-# ----------------------------
= render 'layouts/footer'

:javascript
  Chart.pluginService.register({
    beforeDraw: function (chart) {
      if (chart.config.options.elements.center) {
        //Get ctx from string
        var ctx = chart.chart.ctx;
        
        //Get options from the center object in options
        var centerConfig = chart.config.options.elements.center;
        var fontStyle = centerConfig.fontStyle || 'Arial';
        var txt = centerConfig.text;
        var color = centerConfig.color || '#000';
        var sidePadding = centerConfig.sidePadding || 20;
        var sidePaddingCalculated = (sidePadding/100) * (chart.innerRadius * 2)
        //Start with a base font of 30px
        ctx.font = "30px " + fontStyle;

        //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
        var stringWidth = ctx.measureText(txt).width;
        var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

        // Find out how much the font can grow in width.
        var widthRatio = elementWidth / stringWidth;
        var newFontSize = Math.floor(30 * widthRatio);
        var elementHeight = (chart.innerRadius * 2);

        // Pick a new font size so it will not be larger than the height of label.
        var fontSizeToUse = Math.min(newFontSize, elementHeight);

        //Set font settings to draw it correctly.
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
        var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
        ctx.font = fontSizeToUse+"px " + fontStyle;
        ctx.fillStyle = color;
        
        //Draw text in center
        ctx.fillText(txt, centerX, centerY);
      }
    }
  });
    var config = {
      type: 'doughnut',
      data: {
      labels: [
        "収入",
        "貯金",
        "変動費",
        "固定費"
      ],
      datasets: [{
        data: [(gon.income_sum), (gon.save_sum), (gon.variable_cost_sum), (gon.fixed_cost_sum)],
        backgroundColor: [
          "rgb(255, 99, 132)",
          "rgb(100, 122, 165)",
          "rgb(54, 162, 235)",
          "rgb(255, 205, 86)"
        ]
      }]
    },
    options: {
      elements: {
        center: {
          text: (gon.balances),
          color: '#FF6384', // Default is #000000
          fontStyle: 'Arial', // Default is Arial
          sidePadding: 20 // Defualt is 20 (as a percentage)
        }
      },
      maintainAspectRatio: false,
    }
  };
  var ctx = document.getElementById("myChart").getContext("2d");
  var myChart = new Chart(ctx, config);

  // 目標貯蓄率の達成率
  $('#button-2').click(function() {
    Chart.pluginService.register({
      beforeDraw: function (chart) {
        if (chart.config.options.elements.center) {
          //Get ctx from string
          var ctx = chart.chart.ctx;
          
          //Get options from the center object in options
          var centerConfig = chart.config.options.elements.center;
          var fontStyle = centerConfig.fontStyle || 'Arial';
          var txt = centerConfig.text;
          var color = centerConfig.color || '#000';
          var sidePadding = centerConfig.sidePadding || 20;
          var sidePaddingCalculated = (sidePadding/100) * (chart.innerRadius * 2)
          //Start with a base font of 30px
          ctx.font = "30px " + fontStyle;

          //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
          var stringWidth = ctx.measureText(txt).width;
          var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

          // Find out how much the font can grow in width.
          var widthRatio = elementWidth / stringWidth;
          var newFontSize = Math.floor(30 * widthRatio);
          var elementHeight = (chart.innerRadius * 2);

          // Pick a new font size so it will not be larger than the height of label.
          var fontSizeToUse = Math.min(newFontSize, elementHeight);

          //Set font settings to draw it correctly.
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
          var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
          ctx.font = fontSizeToUse+"px " + fontStyle;
          ctx.fillStyle = color;
          
          //Draw text in center
          ctx.fillText(txt, centerX, centerY);
        }
      }
    });
      var config = {
        type: 'doughnut',
        data: {
        labels: [
          "現在の貯金額",
          "残り"
        ],
        datasets: [{
          data: [(gon.save_sum), (gon.goal_value_sum)-(gon.save_sum)],
          backgroundColor: [
            "rgb(255, 99, 132)",
            "rgb(54, 162, 235)"
          ]
        }]
      },
      options: {
        elements: {
          center: {
            text: (gon.goal),
            color: '#FF6384', // Default is #000000
            fontStyle: 'Arial', // Default is Arial
            sidePadding: 20 // Defualt is 20 (as a percentage)
          },
          maintainAspectRatio: false,
        }
      }
    };
    var ctx = document.getElementById("Chart").getContext("2d");
    var myChart = new Chart(ctx, config);

    $('#myChart').css('display', 'none');
    $('#Chart').css('display', '');
  });

  // クリックでグラフ表示の切り替え
  $('#button-1').click(function() {
    $('#myChart').css('display', '');
    $('#Chart').css('display', 'none');
  });